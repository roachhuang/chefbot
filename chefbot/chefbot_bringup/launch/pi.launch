<launch>
    launch>
    <!-- these are the arguments you can pass this launch file, for example paused:=true -->
    <arg name="paused" default="true" />
    <arg name="use_sim_time" default="false" />
    <arg name="gui" default="true" />
    <arg name="headless" default="false" />
    <arg name="debug" default="true" />

    <!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched -->
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <arg name="world_name" value="$(find chefbot_gazebo)/worlds/robot.world" />
        <arg name="deempty_bug" value="$(arg debug)" />
        <arg name="gui" value="$(arg gui)" />
        <arg name="paused" value="$(arg paused)" />
        <arg name="use_sim_time" value="$(arg use_sim_time)" />
        <arg name="headless" value="$(arg headless)" />
    </include>

    <!--
	<arg name="node_start_delay" default="5" /> 
    <node name="launchpad_node" pkg="chefbot_bringup" type="launchpad_node.py" launch-prefix="bash -c 'sleep $(arg node_start_delay); $0 $@'" >
        <rosparam file="$(find chefbot_bringup)/param/board_config.yaml" command="load" />
    </node>
-->
    <rosparam file="$(find chefbot_bringup)/config/controllers.yaml" command="load" />
    <!-- change this next line to include the launch file for your robot's hardware drivers: -->
    <arg name="simulation" default="$(optenv TURTLEBOT_SIMULATION false)" />
    <param name="/use_sim_time" value="$(arg simulation)" />

    <!-- Load the URDF into the ROS Parameter Server -->
    <arg name="model" />
    <param name="robot_description" command="$(find xacro)/xacro '$(find chefbot_description)/urdf/chefbot_base.xacro'" />

    <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
    <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
    <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen" args="-urdf -model chefbot_base -param robot_description" />

    <!-- important generally, but specifically utilised by the current app manager -->
    <!-- 
    <param name="robot/name" value="$(optenv ROBOT turtlebot)"/>
    <param name="robot/type" value="turtlebot"/>
    -->
    <rosparam param="base_width">0.186</rosparam>
    <rosparam param="ticks_meter">4504</rosparam>

    <group>
        <node name="robot_hardware_interface" pkg="chefbot_bringup" type="mbot" output="screen" />
        <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher">
            <param name="publish_frequency" type="double" value="5.0" />
        </node>
        <node name="joint_vel_service" pkg="chefbot_bringup" type="joints_frm_pid_vel.py" output="screen" />

        <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen" args="
            roachbot/joint_state_controller
            roachbot/rwheel
			roachbot/lwheel
        " />
    </group>

    <node pkg="chefbot_navig_cpp" type="twist_to_motor" name="twist_to_motor" output="screen">
        <remap from="rwheel_vtarget" to="/roachbot/rwheel/command" />
        <remap from="lwheel_vtarget" to="/roachbot/lwheel/command" />
    </node>
    <node pkg="chefbot_navig_cpp" type="diff_tf" name="diff_tf" output="screen" />
    <node name="rviz" pkg="rviz" type="rviz" args="-d $(find chefbot_bringup)/rviz/robot.rviz" />
</launch>
